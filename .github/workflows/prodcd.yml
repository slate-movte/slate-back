on:
  push:
    branches: ["main"]

  workflow_dispatch:

env:
  VERSION: ${{github.sha}}
  DOCKER_IMAGE: ghcr.io/slate-movte/api-server
  NAME: api-server
  DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}

jobs:
  build-push:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "zulu"
      - name: save into .env.properties
        env:
          PROD_VARIABLES: ${{ toJson(secrets) }}
        run : |
          echo "$PROD_VARIABLES" | jq -r 'to_entries | 
          map(select(.key | startswith("PROD_")))[] | "\(.key | sub("^PROD_"; ""))=\(.value)"' > ./config/.env.properties
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Project testing
        run: |
          cat ./config/.env.properties
          SPRING_PROFILES_ACTIVE=prod \
          ./gradlew clean build -i
      - name: Set Up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Cache Docker Layer
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache # cache의 대상을 정한다.
          key: ${{runner.os}}-buildx-${{env.version}}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to Github registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{secrets.CICD_REGISTRY_USERNAME}}
          password: ${{secrets.CICD_REGISTRY_TOKEN}}
      - name: build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          builder: ${{steps.buildx.outputs.name}}
          push: true
          tags: ${{env.DOCKER_IMAGE}}:latest
  deploy:
    needs: build-push
    name: Deploy
    runs-on: [self-hosted, slate-back-deploy]
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: Login to docker registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{secrets.CICD_REGISTRY_USERNAME}}
          password: ${{secrets.CICD_REGISTRY_TOKEN}}
      - name: Execute
        id: execute
        run: |
          docker stop ${{env.NAME}} && docker rm ${{env.NAME}} && docker rmi ${{env.DOCKER_IMAGE}}:latest
            docker run -d -p 8080:8080 -e PROFILE=prod --name ${{env.NAME}} --network back-prod ${{env.DOCKER_IMAGE}}:latest
      - name: send result when success
        if: ${{success() && steps.execute.conclusion=='success'}}
        uses: ./.github/actions/discord_action
        with:
          title: "${{github.repository}}  배포결과"
          author: ${{github.actor}}
          webhookurl: ${{ secrets.DISCORD_WEBHOOK }}
          color: 65280
          description: "정상적으로  배포되었습니다"
      - name: send result when failure
        if: ${{ failure() && steps.execute.conclusion=='failure'}}
        uses: ./.github/actions/discord_action
        with:
          title: "${{github.repository}}  배포결과"
          author: ${{github.actor}}
          webhookurl: ${{ secrets.DISCORD_WEBHOOK }}
          color: 14177041
          description: "배포  실패"
